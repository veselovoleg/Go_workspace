how to run: go run name.go
how to build: go build name.go
https://hackernoon.com/basics-of-golang-for-beginners-6bd9b40d79ae

Packages
Every Go program is made up of packages:

Programs start running in package main.

This program is using the packages with import paths “fmt”

Here is an example:

import "fmt"
import "math"

or

import(
    "fmt"
    "math"
)

Functions
The general form of a function definition in Go programming language is as follows:

func function_name( [parameter list] ) [returned data types] {
    body of function
}

A function can take zero or more arguments.

In example below , add takes two parameters of type int.

Notice that the type comes after the variable name.

package main

import "fmt"

func summ(a int, b int) int {
	return a + b
}

func main() {
		fmt.Println("Сумма равна ", summ(28, 19))
}

Variables:

A variable definition means to tell the compiler where and how much to create 
the storage for the variable. A variable definition specifies a data type and 
also contains a list of one or more variables of that type as follows

var [variable_list] [optional_data_type];

The var statement declares a list of variables; as in function argument lists, 
the type is last.

A var statement can be at package or function level. 
We see both in the example below.

package main

import "fmt"

var node, golang, angular bool

func main() {
	var x int
	fmt.Println(x, node, golang, angular)
}

Loops (only "for"):

A for loop is a repetition control structure that will allow you to efficiently 
write a loop that needs to execute a specific number of times.

The syntax of a for loop in Go programming language is:

for [condition  | (initialization; condition; increment) | range] 
{
    [cycle body]
}

Go has only one looping construct, the for loop.

The basic for loop has three components separated by semicolons:

the init statement: executed before the first iteration
the condition expression: evaluated before every iteration
the post statement: executed at the end of every iteration
The init statement will often be a short variable declaration, 
and the variables declared there are visible only in the scope of the for statement.

The loop will stop iterating once the boolean condition evaluates to false.

Note: Unlike other languages like C, Java, or Javascript there are no 
parentheses surrounding the three components of the for statement and the 
braces { } are always required.

package main

import "fmt"

func main() {
	sum := 0
	for i := 0; i < 8; i++ {
		sum += i
	}
	fmt.Println("Сумма равна ", sum)
	
}

Arrays
Go programming language also provides a data structure called the array, 
which can store a fixed-size sequential collection of elements of the same type. 
An array is used to store a collection of data, but it is often more useful to 
think of an array as a collection of variables of the same type.

To declare an array in Go, a programmer specifies the type of the elements and 
the number of elements required by an array as follows:

var variable_name [SIZE] variable_type

For example, to declare a 10-element array called balance of type float32, 
use this statement:

var balance [10] float32

You can initialize array in Go either one by one or using a single statement as follows:

var balance = []float32{1000.0, 2.0, 3.4, 7.0, 50.0}

The type [n]T is an array of n values of type T.

The expression

var a [10]int

declares a variable a as an array of ten integers.

An array’s length is part of its type, so arrays cannot be resized. This seems limiting, but don’t worry; Go provides a convenient way of working with arrays.

Let us see an example

package main

import "fmt"

func main() {
    var a [2]string
    a[0] = "Hello
    a[1] = "Oleg"
    fmt.Println(a[0], a[1])
    fmt.Println(a)

    primes := [6]int{2, 3, 5, 7, 11, 13}
    fmt.Println(primes)
}

Slices

Golang Slice is an abstraction over Go Array. As Go Array allows you to define type 
of variables that can hold several data items of the same kind but it do not provide 
any inbuilt method to increase size of it dynamically or get a sub array of its own. 
Slices covers this limitation. It provides many utility functions required on Array 
and is widely used in Go programming.

Defining a slice
To define a slice, you can declare it as an array without specifying size or use make 
function to create the one.

var numbers []int /* a slice of unspecified size*/
/*numbers == []int{0,0,0,0,0}*/
numbers = make([]int,5,5) /*a slice of length 5 and capacity 5*/

An array has a fixed size. A slice, on the other hand, is a dynamically-sized, 
flexible view into the elements of an array. In practice, slices are much more 
common than arrays.

The type []T is a slice with elements of type T.

This expression creates a slice of the first five elements of the array a:

a[0:5]

Let us understand it by an example

package main

import "fmt”

func main() {
	primes := [6]int{2, 3, 5, 7, 11, 13}
	fmt.Println(primes)
	var s []int = primes[1:4}
	fmt.Println(s)
}

Structure
structure in golang is a user defined data type available in Go programming, 
which also allows you to combine data items of different kinds.

Defining a Structure

To define a structure, you must use type and struct statements. 
The struct statement defines a new data type, with more than one member for 
your program. type statement binds a name with the type which is struct in our case. 
The format of the struct statement is this:

type struct_variable_type struct {
member definition;
member definition;
...
member definition;
}

Once a structure type is defined, it can be used to declare variables of that 
type using following syntax.

variable_name:= structure_variable_type {value1, value2...valuen}

To access any member of a structure, we use the member access operator (.). 
The member access operator is coded as a period between the structure variable 
name and the structure member that we wish to access. You would use struct keyword 
to define variables of structure type. Following is the example to explain usage of 
structure:

package main

import "fmt”

type Vertex struct {
	X int
	Y int
}

func main() {
	v := Vertex{1, 2}
	v.X = 4
	fmt.Println(v.X)
}

https://hackernoon.com/basics-of-golang-for-beginners-6bd9b40d79ae
